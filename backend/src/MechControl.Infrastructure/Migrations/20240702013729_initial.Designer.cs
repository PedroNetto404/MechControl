// <auto-generated />
using System;
using MechControl.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MechControl.Infrastructure.Migrations
{
    [DbContext(typeof(MechControlContext))]
    [Migration("20240702013729_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MechControl.Domain.Features.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cnpj")
                        .HasColumnType("text")
                        .HasColumnName("cnpj");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("Cpf")
                        .HasColumnType("text")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsMei")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mei");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("TradeName")
                        .HasColumnType("text")
                        .HasColumnName("trade_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("customer_type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("customers", (string)null);

                    b.HasDiscriminator<string>("customer_type").HasValue("Customer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MechControl.Domain.Features.Customers.CorporateCustomer", b =>
                {
                    b.HasBaseType("MechControl.Domain.Features.Customers.Customer");

                    b.HasDiscriminator().HasValue("corporate");
                });

            modelBuilder.Entity("MechControl.Domain.Features.Customers.IndividualCustomer", b =>
                {
                    b.HasBaseType("MechControl.Domain.Features.Customers.Customer");

                    b.HasDiscriminator().HasValue("individual");
                });

            modelBuilder.Entity("MechControl.Domain.Features.Customers.Customer", b =>
                {
                    b.OwnsOne("MechControl.Domain.Shared.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_complement");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_neighborhood");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_number");

                            b1.Property<string>("StateCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_state_code");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
